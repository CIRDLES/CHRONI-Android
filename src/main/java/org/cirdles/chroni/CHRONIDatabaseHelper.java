package org.cirdles.chroni;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

/**
 * This class defines the functionality behind the database.
 */
public class CHRONIDatabaseHelper extends SQLiteOpenHelper {
    public static final String KEY_ROWID = "_id";	// keeps track of row count
    public static final String KEY_DATE = "_date";
    public static final String ALIQUOT_NAME = "aliquot_name";
    public static final String REPORT_SETTINGS_NAME = "report_settings_name";

    private static final String DATABASE_NAME = "MyCHRONIDB";	// name of database
    private static final String DATABASE_TABLE = "viewedAliquotTable";	// name of table used
    private static final int DATABASE_VERSION = 1;

    public CHRONIDatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    @Override
	/**
	 * Only called when database is created
	 * @see android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)
	 */
    public void onCreate(SQLiteDatabase db) {
        // Creates table and adds appropriate rows
        db.execSQL("CREATE TABLE " + DATABASE_TABLE + " (" +
                        KEY_ROWID + " INTEGER PRIMARY KEY AUTOINCREMENT, " +
                        KEY_DATE + " TEXT NOT NULL, " +
                        ALIQUOT_NAME + " TEXT NOT NULL, " +
                        REPORT_SETTINGS_NAME + " TEXT NOT NULL);"
        );
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Called to update the created table
        db.execSQL("DROP TABLE IF EXISTS " + DATABASE_NAME);

        // creates table again
        onCreate(db);
    }


    /**
     * Method that will create an entry in the database.
     * @params the column values that will be added to the database
     */
    public void createEntry(String date, String aliquotName, String reportSettingsName) {
        SQLiteDatabase db = this.getWritableDatabase();

        ContentValues cv = new ContentValues();
        cv.put(KEY_DATE, date);
        cv.put(ALIQUOT_NAME, aliquotName);
        cv.put(REPORT_SETTINGS_NAME, reportSettingsName);

        if (!aliquotAlreadyExists(aliquotName))   // only insert the entire entry it if it does not exist
            db.insert(DATABASE_TABLE, null, cv);

        else {  // if it already exists, just update the time
            db.delete(DATABASE_TABLE, ALIQUOT_NAME + "='" + aliquotName + "'", null);
            db.insert(DATABASE_TABLE, null, cv);
        }

        db.close();
    }

    /**
     * Checks to see whether the aliquot given is already in the database.
     *
     * @return a boolean that tells if this is true.
     */
    public boolean aliquotAlreadyExists(String aliquotName) {
        boolean result;

        String query = "SELECT * FROM " + DATABASE_TABLE + " WHERE " + ALIQUOT_NAME + "='" + aliquotName + "';";
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery(query, null);
        result = (cursor.getCount() > 0);   // returns true if there were items found
        cursor.close();

        return result;
    }

    /**
     * Method creates a 2D array of all the data found in the database from most recent to oldest
     * @return the 2d array generated by the method
     *
     */
    public String[][] fillTableData() {
        SQLiteDatabase ourDatabase = this.getReadableDatabase();

        String[] columns = new String[] {KEY_ROWID, KEY_DATE, ALIQUOT_NAME, REPORT_SETTINGS_NAME}; //column names
        Cursor c = ourDatabase.query(DATABASE_TABLE, columns, null, null, null, null, null);

        // Setting up indices for each column
        int iDate = c.getColumnIndex(KEY_DATE);
        int iAliquot = c.getColumnIndex(ALIQUOT_NAME);

        // Sets us the 2d array
        final int ROWS = (int) getTotalEntryCount() + 1; //extra row reserved for header
        final int COLS = 3;
        String[][] databaseTable = new String[ROWS][COLS];

        // Fills in the header row
        databaseTable[0][0] = "Last Opened";
        databaseTable[0][1] = "Aliquot";
        databaseTable[0][2] = "View";	// empty header for buttons

        // inserts the data into the 2D array
        int rowNumber = 1; // Starts on row 1 to avoid the header row
        for(c.moveToLast(); !c.isBeforeFirst(); c.moveToPrevious()){
            int columnNumber = 0;
            databaseTable[rowNumber][columnNumber] = c.getString(iDate); // populates cell with date
            columnNumber++;
            databaseTable[rowNumber][columnNumber] = c.getString(iAliquot); // Populates cell with Aliquot name
            columnNumber++;
            databaseTable[rowNumber][columnNumber] = " "; // Leaves space for button
            rowNumber++;
        }
        c.close();
        return databaseTable;
    }


    /**
     * Figures out the number of entries in the entire database.
     */
    public long getTotalEntryCount() {
        String countQuery = "SELECT * FROM " + DATABASE_TABLE;
        SQLiteDatabase ourDatabase = this.getReadableDatabase();
        Cursor cursor = ourDatabase.rawQuery(countQuery, null);
        int count = cursor.getCount();
        cursor.close();
        return count;
    }

    /**
     * Checks to see if information is in the database.
     */
    public boolean isEmpty(){
        return (getTotalEntryCount() == 0);
    }

}